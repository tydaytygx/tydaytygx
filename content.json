{"meta":{"title":"TYGX's blog","subtitle":"Welcome","description":null,"author":"TYGX","url":"http://yoursite.com"},"pages":[{"title":"TYGX","date":"2018-12-06T07:05:14.000Z","updated":"2018-12-06T07:05:14.797Z","comments":true,"path":"TYGX/index.html","permalink":"http://yoursite.com/TYGX/index.html","excerpt":"","text":""}],"posts":[{"title":"Steam_sale","slug":"Steam-sale","date":"2020-02-24T07:17:47.000Z","updated":"2020-02-24T10:33:39.048Z","comments":true,"path":"2020/02/24/Steam-sale/","link":"","permalink":"http://yoursite.com/2020/02/24/Steam-sale/","excerpt":"","text":"import requests import urllib import urllib.request import re import os import shutil def createFile(filePath): if os.path.exists(filePath): # If folder exists ​ shutil.rmtree(‘img’) else: # File doesn’t exist ​ print(‘No such file:%s’% filePath) if os.path.exists(filePath): ​ print(‘%s: exists’%filePath) else: ​ try: ​ os.mkdir(filePath) ​ print(‘New folder：%s’%filePath) ​ except Exception as e: ​ os.makedirs(filePath) ​ print(‘New multi-sub-folder：%s’ % filePath) def File_Checker(): # Check if output files exist or not if(os.path.exists(‘steam_sale.html’)): ​ os.remove(‘steam_sale.html’) # Check html file elif(os.path.exists(‘steam_saleout.md’)): ​ os.remove(‘steam_saleout.md’) # Check output file ​ # STEAM_SPIDER def Steam_Spider(): page = 0 # This loop may not suit this site, use when necessary while(page &lt; 1): ​ url = ‘https://store.steampowered.com/specials#p=&#39;+ str(page)+ ‘&amp;tab=TopSellers’ # Sale page ​ header = {‘user-agent’: ‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36’} ​ r = requests.get(url) ​ r = requests.get(url, headers=header) ​ content = r.text ​ f = open(‘steam_sale.html’,’a’, encoding = ‘UTF-8’, errors = ‘ignore’) ​ print(r.text, file = f) ​ f.close() ​ print(‘Completed with ‘ + r.encoding) # Site ‘s HTML encoding ​ page = page + 1 def getNonRepeatList(data): # No-repeat tool return [i for n, i in enumerate(data) if i not in data[:n]] def Output(): discount_img = [] discount_name = [] discount_original_price= [] discount_pct = [] discount_final_price =[] with open(‘steam_sale.html’, ‘r’, encoding=’UTF-8’, errors=’ignore’) as f2: ​ line = f2.readline() ​ list1 = [] ​ while line: ​ ​ try: ​ line = f2.readline() ​ if ‘tab_item_name’ in line: ​ print(re.findall(r’&lt;div\\sclass=”tab_item_name”&gt;(.+?)‘, line)[0]) ​ discount_name.append(re.findall(r’&lt;div\\sclass=”tab_item_name”&gt;(.+?)‘, line)[0]) ​ print(‘—————————————————————–&gt;&gt;&gt;’) ​ ​ elif ‘tab_item_cap_img’ in line: ​ print(re.findall(r’tab_item_cap_img”\\ssrc=”(.+?)”\\s&gt;’, line)[0]) #img_url ​ discount_img.append(re.findall(r’tab_item_cap_img”\\ssrc=”(.+?)”\\s&gt;’, line)[0]) ​ elif ‘discount_block tab_item_discount’ in line: ​ print(‘discount_original_price = ‘ + re.findall(r’&lt;div\\sclass=”discount_original_price”&gt;(.+?)‘, line)[0]) ​ print(‘discount_pct = ‘ + re.findall(r’&lt;div\\sclass=”discount_pct”&gt;(.+?)‘, line)[0]) ​ print(‘discount_final_price = ‘ + re.findall(r’&lt;div\\sclass=”discount_final_price”&gt;(.+?)‘, line)[0]) ​ ​ ​ discount_original_price.append(re.findall(r’&lt;div\\sclass=”discount_original_price”&gt;(.+?)‘, line)[0]) ​ discount_pct.append(re.findall(r’&lt;div\\sclass=”discount_pct”&gt;(.+?)‘, line)[0]) ​ discount_final_price.append(re.findall(r’&lt;div\\sclass=”discount_final_price”&gt;(.+?)‘, line)[0]) ​ ​ except OSError: ​ pass # Output as a file with open(‘steam_saleout.html’, ‘w’, encoding = ‘UTF-8’, errors = ‘ignore’) as f3: ​ print(r’’’ ​ &lt;!DOCTYPE html&gt; ​ ​​ {​ transition-duration: 0.5s;​ margin: 0;​ word-break: break-all;​ box-sizing: border-box;​ transition-duration: 0.5s;​ font-family: “microsoft yahei”;​ color: white;​ }​ body{​ background-color: #24292e;​ }​ div:hover{​ border: none;​ font-size: 20px;​ background-color: #5b5b5b;​ width: 100%;​​ }​​ .discount_original_price{​ background-color: cornflowerblue;​ width: 100%;​ background-color: #2894ff;​ border-radius: 5px 5px 5px 5px;​ }​​ .discount_pct{​ background-color: cornflowerblue;​ width: 100%;​ background-color: #73bf00;​ border-radius: 5px 5px 5px 5px;​ }​​ .discount_final_price{​​ background-color: cornflowerblue;​ width: 100%;​ background-color: #ff8040;​ border-radius: 5px 5px 5px 5px;​​ }​​ .hover_check{​ display: block;​ background-color: #24292e;*​ width: 0%;​ }​ .hover_check:hover{​ background-color: indianred;​ width: 100%;​ }​ ‘’’, file = f3)​​ for v in range(len(discount_name)):​​ if ‘/‘ in discount_name[v]:​ urllib.request.urlretrieve(discount_img[v], ‘img\\%s.jpg’ % discount_name[v].replace(‘/‘, ‘’)) # When using urlretrieve, the : makes files can’t be save completely​ print(r’&lt;img src=”img\\%s.jpg” class=”multiimage 3d_show”/ &gt; ‘ % discount_name[v].replace(‘/‘, ‘’), file = f3)​ elif ‘:’ in discount_name[v]:​ urllib.request.urlretrieve(discount_img[v], ‘img\\%s.jpg’ % discount_name[v].replace(‘:’, ‘’)) # When using urlretrieve, the : makes files can’t be save completely​ print(r’&lt;img src=”img\\%s.jpg” class=”multiimage 3d_show”/ &gt; ‘ % discount_name[v].replace(‘:’, ‘’), file = f3)​ elif ‘|’ in discount_name[v]:​ urllib.request.urlretrieve(discount_img[v], ‘img\\%s.jpg’ % discount_name[v].replace(‘|’, ‘’)) # When using urlretrieve, the | makes files can’t be save completely​ print(r’&lt;img src=”img\\%s.jpg” class=”multiimage 3d_show”/ &gt; ‘ % discount_name[v].replace(‘|’, ‘’), file = f3)​​ elif ‘?’ in discount_name[v]:​ urllib.request.urlretrieve(discount_img[v], ‘img\\%s.jpg’ % discount_name[v].replace(‘?’, ‘’)) # When using urlretrieve, the | makes files can’t be save completely​ print(r’&lt;img src=”img\\%s.jpg” class=”multiimage 3d_show”/ &gt; ‘ % discount_name[v].replace(‘|’, ‘’), file = f3)​​ elif ‘,’ in discount_name[v]:​ urllib.request.urlretrieve(discount_img[v], ‘img\\%s.jpg’ % discount_name[v].replace(‘,’, ‘’)) # When using urlretrieve, the | makes files can’t be save completely​ print(r’&lt;img src=”img\\%s.jpg” class=”multiimage 3d_show”/ &gt; ‘ % discount_name[v].replace(‘|’, ‘’), file = f3)​​ else:​ urllib.request.urlretrieve(discount_img[v], ‘img\\%s.jpg’ % discount_name[v])​ print(r’&lt;img src=”img\\%s.jpg” class=”multiimage 3d_show”/ &gt; ‘ % discount_name[v], file = f3)​​​​ print(‘# ‘ + discount_name[v], file = f3)​ print(r’discount_original_price = %s‘ % discount_original_price[v], file = f3) # Game’s Discount_before, transformating would be a little bit slower than the others?​ print(r’discount_pct = %s‘ % discount_pct[v], file = f3) # Game’s Discount​ print(r’ discount_final_price = %s‘ % discount_final_price[v], file = f3) # Game’s Discounted​ # print(‘——————-‘, file = f3)​ print(r’’’ ‘’’, file = f3) ​ ​ ​ print(‘done’) if name == ‘main‘: createFile(os.getcwd() + ‘\\img’) File_Checker() Steam_Spider() Output()","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"用make创建map字典","slug":"go-map","date":"2019-01-21T15:02:47.000Z","updated":"2019-01-21T15:20:26.815Z","comments":true,"path":"2019/01/21/go-map/","link":"","permalink":"http://yoursite.com/2019/01/21/go-map/","excerpt":"","text":"package main import “fmt” func main() { a := make(map[int]string) a[1] = “suck” a[2] = “gaybar” a[3] = “doorone” for k, v := range a { fmt.Println(“key=”, k, “value=”, v) }}","categories":[],"tags":[]},{"title":"go slice","slug":"go-slice","date":"2019-01-18T17:41:26.000Z","updated":"2019-01-18T17:42:40.939Z","comments":true,"path":"2019/01/19/go-slice/","link":"","permalink":"http://yoursite.com/2019/01/19/go-slice/","excerpt":"","text":"package main import “fmt” func main() { a := […]int{1, 2, 3, 4, 5, 6, 7} s1 := a[0:4] s2 := a[2:4] s3 := a[4:] fmt.Println(s1, s2, s3) }","categories":[],"tags":[]},{"title":"New Start, Go","slug":"New-Start-Go","date":"2019-01-18T10:59:46.000Z","updated":"2019-01-18T11:04:14.597Z","comments":true,"path":"2019/01/18/New-Start-Go/","link":"","permalink":"http://yoursite.com/2019/01/18/New-Start-Go/","excerpt":"","text":"Starting new leaning plan with golang.It’s amazing.","categories":[],"tags":[]},{"title":"starter page","slug":"starter-page","date":"2018-12-06T07:04:49.000Z","updated":"2018-12-07T16:02:48.923Z","comments":true,"path":"2018/12/06/starter-page/","link":"","permalink":"http://yoursite.com/2018/12/06/starter-page/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"freshman","slug":"freshman","date":"2018-12-05T13:07:11.000Z","updated":"2018-12-07T17:06:40.454Z","comments":true,"path":"2018/12/05/freshman/","link":"","permalink":"http://yoursite.com/2018/12/05/freshman/","excerpt":"","text":"I am new here","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-12-05T05:40:25.897Z","updated":"2018-12-05T05:40:25.897Z","comments":true,"path":"2018/12/05/hello-world/","link":"","permalink":"http://yoursite.com/2018/12/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}